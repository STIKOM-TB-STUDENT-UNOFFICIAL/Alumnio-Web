{"version":3,"sources":["../src/libs/db/index.ts","../src/utils/jwt.ts","../src/middleware/authorization.ts","../src/utils/bcrypt.ts","../src/repositories/user-repository.ts","../src/services/auth-service.ts","../src/services/change-password-service.ts","../src/utils/generate-meta.ts","../src/handlers/auth-handler.ts","../src/schemas/meta-schemas.ts","../src/schemas/auth-schema.ts","../src/routes/auth-route.ts","../src/utils/get-extension.ts","../src/utils/uuid.ts","../src/services/user-service.ts","../src/handlers/user-handler.ts","../src/schemas/user-schema.ts","../src/routes/user-route.ts","../src/repositories/majors-repository.ts","../src/services/major-service.ts","../src/handlers/major-handler.ts","../src/schemas/major-schema.ts","../src/routes/major-route.ts","../src/check-uploads-dir.ts","../src/index.ts"],"names":["HTTPException","z","patchUser","Hono","describeRoute","resolver","validator"],"mappings":";;;;;;;;;;;;;;;;;AAEO,IAAM,MAAA,GAAS,IAAI,YAAA,EAAa;ACCvC,eAAsB,QAAQ,OAAA,EAAuB;AACjD,EAAA,OAAO,MAAM,IAAA,CAAK;AAAA,IACd,GAAG,OAAA;AAAA,IACH,GAAA,EAAK,KAAK,KAAA,CAAM,IAAA,CAAK,KAAI,GAAI,GAAI,CAAA,GAAI,EAAA,GAAK,EAAA,GAAK;AAAA,GACnD,EAAG,OAAA,CAAQ,GAAA,CAAI,OAAA,IAAW,UAAU,OAAO,CAAA;AAC/C;AAEA,eAAsB,UAAa,KAAA,EAA2B;AAC1D,EAAA,OAAO,MAAM,MAAA,CAAO,KAAA,EAAO,QAAQ,GAAA,CAAI,OAAA,IAAW,UAAU,OAAO,CAAA;AACvE;AAEO,SAAS,UAAa,KAAA,EAAkB;AAC3C,EAAA,OAAO,MAAA,CAAO,KAAK,CAAA,CAAE,OAAA;AACzB;ACXO,IAAM,MAAA,GAAS;AAAA,EAClB,aAAA,EAAe,CAAA;AAAA,EACf,MAAA,EAAQ;AACZ,CAAA;AAEO,SAAS,cAAc,MAAA,EAAiB;AAC3C,EAAA,OAAO,OAAM,GAAY,IAAA,KAAe;AACpC,IAAA,IAAG,CAAC,CAAA,CAAE,GAAA,CAAI,MAAA,CAAO,eAAe,CAAA,EAAE;AAC9B,MAAA,MAAM,IAAI,aAAA,CAAc,GAAA,EAAK,EAAE,OAAA,EAAS,oBAAoB,CAAA;AAAA,IAChE;AACA,IAAA,IAAI;AACA,MAAA,MAAM,KAAA,GAAQ,EAAE,GAAA,CAAI,MAAA,CAAO,eAAe,CAAA,EAAG,KAAA,CAAM,GAAG,CAAA,CAAE,CAAC,CAAA;AACzD,MAAA,MAAM,CAAA,GAAI,MAAM,SAAA,CAAyB,KAAe,CAAA;AACxD,MAAA,IAAG,CAAC,MAAA,CAAO,QAAA,CAAS,CAAA,CAAE,IAAI,CAAA,EAAE;AACxB,QAAA,MAAM,IAAI,aAAA,CAAc,GAAA,EAAK,EAAE,OAAA,EAAS,oBAAoB,CAAA;AAAA,MAChE;AAEA,MAAA,MAAM,IAAA,EAAK;AAAA,IACf,CAAA,CAAA,MACM;AACF,MAAA,MAAM,IAAI,aAAA,CAAc,GAAA,EAAK,EAAE,OAAA,EAAS,oBAAoB,CAAA;AAAA,IAChE;AAAA,EACJ,CAAA;AACJ;AC1BA,IAAM,YAAqB,QAAA,CAAS,OAAA,CAAQ,GAAA,CAAI,cAAA,IAAkB,GAAG,CAAA,IAAK,CAAA;AAEnE,SAAS,aAAa,QAAA,EAAiB;AAC1C,EAAA,OAAO,MAAA,CAAO,QAAA,CAAS,QAAA,EAAU,SAAS,CAAA;AAC9C;AAEO,SAAS,eAAA,CAAgB,UAAkB,YAAA,EAAqB;AACnE,EAAA,OAAO,MAAA,CAAO,WAAA,CAAY,QAAA,EAAU,YAAY,CAAA;AACpD;;;ACJA,eAAsB,WAAA,GAAa;AAC/B,EAAA,OAAO,MAAM,MAAA,CAAO,IAAA,CAAK,QAAA,CAAS;AAAA,IAC9B,OAAA,EAAS;AAAA,MACL,eAAA,EAAiB;AAAA,QACb,OAAA,EAAQ;AAAA,UACJ,KAAA,EAAO;AAAA;AACX;AACJ,KACJ;AAAA,IACA,KAAA,EAAO;AAAA,MACH,MAAM,MAAA,CAAO;AAAA;AACjB,GACH,CAAA;AACL;AAEA,eAAsB,aAAa,EAAA,EAAW;AAC1C,EAAA,OAAO,MAAM,MAAA,CAAO,IAAA,CAAK,SAAA,CAAU;AAAA,IAC/B,KAAA,EAAO;AAAA,MACH;AAAA,KACJ;AAAA,IACA,OAAA,EAAS;AAAA,MACL,eAAA,EAAiB;AAAA;AACrB,GACH,CAAA;AACL;AAEA,eAAsB,gBAClB,IAAA,EACH;AACG,EAAA,OAAO,MAAM,MAAA,CAAO,IAAA,CAAK,SAAA,CAAU;AAAA,IAC/B,KAAA,EAAO;AAAA,MACH,GAAG;AAAA,KACP;AAAA,IACA,OAAA,EAAS;AAAA,MACL,eAAA,EAAiB;AAAA,QACb,MAAA,EAAQ;AAAA,UACJ,QAAA,EAAU;AAAA;AACd;AACJ;AACJ,GACH,CAAA;AACL;AAEA,eAAsB,cAAc,IAAA,EAAY;AAC5C,EAAA,OAAO,MAAM,MAAA,CAAO,IAAA,CAAK,MAAA,CAAO;AAAA,IAC5B,IAAA,EAAM;AAAA,MACF,UAAU,IAAA,CAAK,QAAA;AAAA,MACf,QAAA,EAAU,YAAA,CAAa,IAAA,CAAK,QAAA,IAAY,EAAE,CAAA;AAAA,MAC1C,MAAM,IAAA,CAAK,IAAA;AAAA,MACX,eAAA,EAAiB;AAAA,QACb,MAAA,EAAQ;AAAA,UACJ,QAAA,EAAW,KAAK,eAAA,CAAyC,QAAA;AAAA,UACzD,KAAA,EAAQ,KAAK,eAAA,CAAyC,KAAA;AAAA,UACtD,KAAA,EAAQ,KAAK,eAAA,CAAyC,KAAA;AAAA,UACtD,OAAA,EAAU,KAAK,eAAA,CAAyC,OAAA;AAAA,UACxD,GAAA,EAAM,KAAK,eAAA,CAAyC,GAAA;AAAA,UACpD,OAAA,EAAU,KAAK,eAAA,CAAyC,OAAA;AAAA,UACxD,OAAA,EAAU,KAAK,eAAA,CAAyC;AAAA;AAC5D;AACJ;AACJ,GACH,CAAA;AACL;AAEA,eAAsB,oBAAA,CAAqB,QAAgB,eAAA,EAAgD;AACvG,EAAA,OAAO,MAAM,MAAA,CAAO,IAAA,CAAK,MAAA,CAAO;AAAA,IAC5B,KAAA,EAAO;AAAA,MACH,EAAA,EAAI;AAAA,KACR;AAAA,IACA,IAAA,EAAM;AAAA,MACF,eAAA,EAAiB;AAAA,QACb,MAAA,EAAQ;AAAA,UACJ,GAAG;AAAA;AACP;AACJ;AACJ,GACH,CAAA;AACL;AAEA,eAAsB,SAAA,CAAU,QAAgB,IAAA,EAK9C;AACE,EAAA,OAAO,MAAM,MAAA,CAAO,IAAA,CAAK,MAAA,CAAO;AAAA,IAC5B,KAAA,EAAO;AAAA,MACH,EAAA,EAAI;AAAA,KACR;AAAA,IACA;AAAA,GACH,CAAA;AACL;AAEA,eAAsB,eAAe,MAAA,EAAe;AAChD,EAAA,MAAM,IAAA,GAAO,MAAM,MAAA,CAAO,eAAA,CAAgB,SAAA,CAAU;AAAA,IAChD,KAAA,EAAO;AAAA,MACH;AAAA;AACJ,GACH,CAAA;AACD,EAAA,IAAG,IAAA,EAAM,eAAe,EAAA,EAAG;AACvB,IAAA,OAAO,IAAA,EAAM,WAAA;AAAA,EACjB;AACA,EAAA,OAAO,KAAA;AACX;AAEA,eAAsB,iBAAA,CAAkB,QAAgB,QAAA,EAAiB;AACrE,EAAA,OAAO,MAAM,MAAA,CAAO,eAAA,CAAgB,MAAA,CAAO;AAAA,IACvC,KAAA,EAAO;AAAA,MACH;AAAA,KACJ;AAAA,IACA,IAAA,EAAM;AAAA,MACF,WAAA,EAAa;AAAA;AACjB,GACH,CAAA;AACL;AClHA,eAAsB,YAAY,QAAA,EAAqB;AACnD,EAAA,MAAM,IAAA,GAAO,MAAM,eAAA,CAAgB;AAAA,IAC/B,GAAG,QAAA;AAAA,IACH,QAAA,EAAU;AAAA,GACb,CAAA;AACD,EAAA,IAAG,CAAC,IAAA,EAAK;AACL,IAAA,MAAM,IAAIA,aAAAA,CAAc,GAAA,EAAK,EAAC,OAAA,EAAS,kBAAiB,CAAA;AAAA,EAC5D;AACA,EAAA,IAAG,CAAC,eAAA,CAAgB,QAAA,CAAS,YAAY,EAAA,EAAI,IAAA,CAAK,QAAQ,CAAA,EAAE;AACxD,IAAA,MAAM,IAAIA,aAAAA,CAAc,GAAA,EAAK,EAAC,OAAA,EAAS,iCAAgC,CAAA;AAAA,EAC3E;AAEA,EAAA,OAAO,IAAA;AACX;AAEA,eAAsB,sBAAsB,KAAA,EAAc;AACtD,EAAA,MAAM,WAAA,GAAc,MAAM,SAAA,CAAyB,KAAK,CAAA;AACxD,EAAA,OAAO,WAAA;AACX;;;ACrBA,eAAsB,qBAAA,CAAsB,QAAgB,WAAA,EAAoB;AAC5E,EAAA,OAAO,MAAM,UAAU,MAAA,EAAQ;AAAA,IAC3B,QAAA,EAAU,aAAa,WAAW;AAAA,GACrC,CAAA;AACL;;;ACLO,SAAS,YAAA,CAAa,MAAA,EAAqB,IAAA,EAAc,OAAA,EAAwB;AACpF,EAAA,OAAO;AAAA,IACH,MAAA;AAAA,IACA,IAAA;AAAA,IACA;AAAA,GACJ;AACJ;;;ACAA,eAAsB,gBAAgB,CAAA,EAAW;AAC7C,EAAA,MAAM,OAAO,MAAM,WAAA,CAAY,MAAM,CAAA,CAAE,GAAA,CAAI,MAAM,CAAA;AAEjD,EAAA,MAAM,QAAA,GAA0B;AAAA,IAC5B,IAAA,EAAM,YAAA,CAAa,SAAA,EAAW,GAAA,EAAK,mBAAmB,CAAA;AAAA,IACtD,IAAA,EAAM;AAAA,MACF,KAAA,EAAO,MAAM,OAAA,CAAQ;AAAA,QACjB,UAAU,IAAA,CAAK,QAAA;AAAA,QACf,MAAM,IAAA,CAAK,IAAA;AAAA,QACX,QAAA,EAAU,IAAA,CAAK,eAAA,EAAiB,QAAA,IAAY,EAAA;AAAA,QAC5C,QAAQ,IAAA,CAAK;AAAA,OAChB;AAAA;AACL,GACJ;AAEA,EAAA,OAAO,CAAA,CAAE,KAAK,QAAQ,CAAA;AAC1B;AAEA,eAAsB,eAAe,CAAA,EAAW;AAC5C,EAAA,MAAM,WAAA,GAAc,MAAM,qBAAA,CAAsB,CAAA,CAAE,GAAA,CAAI,MAAA,CAAO,eAAe,CAAA,EAAG,KAAA,CAAM,GAAG,CAAA,CAAE,CAAC,KAAK,EAAE,CAAA;AAElG,EAAA,MAAM,QAAA,GAA8C;AAAA,IAChD,IAAA,EAAM,YAAA,CAAa,SAAA,EAAW,GAAA,EAAK,8BAA8B,CAAA;AAAA,IACjE,IAAA,EAAM;AAAA,GACV;AAEA,EAAA,OAAO,CAAA,CAAE,KAAK,QAAQ,CAAA;AAC1B;AAEA,eAAsB,sBAAsB,CAAA,EAAW;AACnD,EAAA,MAAM,WAAA,GAAc,MAAM,qBAAA,CAAsB,CAAA,CAAE,GAAA,CAAI,MAAA,CAAO,eAAe,CAAA,EAAG,KAAA,CAAM,GAAG,CAAA,CAAE,CAAC,KAAK,EAAE,CAAA;AAClG,EAAA,MAAM,EAAE,QAAA,EAAS,GAAI,MAAM,CAAA,CAAE,IAAI,IAAA,EAAK;AAEtC,EAAA,MAAM,qBAAA,CAAsB,WAAA,CAAY,MAAA,EAAQ,QAAQ,CAAA;AAExD,EAAA,MAAM,QAAA,GAA8B;AAAA,IAChC,IAAA,EAAM,YAAA,CAAa,SAAA,EAAW,GAAA,EAAK,8BAA8B,CAAA;AAAA,IACjE,MAAM;AAAC,GACX;AAEA,EAAA,OAAO,CAAA,CAAE,KAAK,QAAQ,CAAA;AAC1B;AC/CO,IAAM,UAAA,GAAa,EAAE,MAAA,CAAO;AAAA,EAC/B,QAAQ,CAAA,CAAE,IAAA,CAAK,CAAC,SAAA,EAAW,QAAQ,CAAC,CAAA;AAAA,EACpC,OAAA,EAAS,EAAE,MAAA,EAAO;AAAA,EAClB,IAAA,EAAM,EAAE,MAAA;AACZ,CAAC,CAAA;;;ACHM,IAAM,UAAA,GAAaC,EAAE,MAAA,CAAO;AAAA,EAC/B,IAAA,EAAMA,EAAE,MAAA,CAAO;AAAA,IACX,cAAA,EAAgB;AAAA,GACnB,CAAA;AAAA,EACD,QAAA,EAAUA,EAAE,MAAA,CAAO;AAAA,IACf,cAAA,EAAgB;AAAA,GACnB,CAAA;AAAA,EACD,QAAA,EAAUA,EAAE,MAAA,CAAO;AAAA,IACf,cAAA,EAAgB;AAAA,GACnB,CAAA,CAAE,GAAA,CAAI,CAAA,EAAG,2BAA2B;AACzC,CAAC,CAAA;AAEM,IAAM,iBAAA,GAAoB,WAAW,MAAA,CAAO;AAAA,EAC/C,QAAA,EAAUA,EAAE,SAAA;AAChB,CAAC,CAAA;AAEM,IAAM,kBAAA,GAAqBA,EAAE,MAAA,CAAO;AAAA,EACvC,IAAA,EAAM,UAAA;AAAA,EACN,IAAA,EAAMA,EAAE,KAAA,CAAM;AAAA,IACVA,EAAE,MAAA,CAAO;AAAA,MACL,KAAA,EAAOA,EAAE,MAAA;AAAO,KACnB,CAAA;AAAA,IACDA,CAAAA,CAAE,KAAA,CAAMA,CAAAA,CAAE,GAAA,EAAK;AAAA,GAClB;AACL,CAAC,CAAA;AAEM,IAAM,yBAAA,GAA4BA,EAAE,MAAA,CAAO;AAAA,EAC9C,IAAA,EAAM,UAAA;AAAA,EACN,IAAA,EAAMA,CAAAA,CAAE,KAAA,CAAMA,CAAAA,CAAE,KAAK;AACzB,CAAC,CAAA;AAEM,IAAM,iBAAA,GAAoBA,EAAE,MAAA,CAAO;AAAA,EACtC,QAAA,EAAUA,CAAAA,CAAE,MAAA,CAAO,EAAC,cAAA,EAAgB,yBAAwB,CAAA,CAAE,GAAA,CAAI,CAAA,EAAG,2BAA2B;AACpG,CAAC,CAAA;AC1BM,IAAM,SAAA,GAAY,IAAI,IAAA,EAAK;AAElC,SAAA,CAAU,IAAA;AAAA,EAAK,GAAA;AAAA,EACX,aAAA,CAAc;AAAA,IACV,WAAA,EAAa,mBAAA;AAAA,IACb,IAAA,EAAM,CAAC,MAAM,CAAA;AAAA,IACb,SAAA,EAAW;AAAA,MACP,GAAA,EAAK;AAAA,QACD,WAAA,EAAa,6BAAA;AAAA,QACb,OAAA,EAAS;AAAA,UACL,kBAAA,EAAoB;AAAA,YAChB,MAAA,EAAQ,SAAS,kBAAkB;AAAA;AACvC;AACJ;AACJ;AACJ,GACH,CAAA;AAAA,EACD,SAAA,CAAU,QAAQ,UAAU,CAAA;AAAA,EAC5B;AACJ,CAAA,CACC,GAAA;AAAA,EAAI,GAAA;AAAA,EACD,aAAA,CAAc;AAAA,IACV,WAAA,EAAa,yBAAA;AAAA,IACb,IAAA,EAAM,CAAC,MAAM,CAAA;AAAA,IACb,SAAA,EAAW;AAAA,MACP,GAAA,EAAK;AAAA,QACD,WAAA,EAAa,sCAAA;AAAA,QACb,OAAA,EAAS;AAAA,UACL,kBAAA,EAAoB;AAAA,YAChB,MAAA,EAAQ,SAAS,iBAAiB;AAAA;AACtC;AACJ;AACJ;AACJ,GACH,CAAA;AAAA,EACD;AACJ,CAAA,CACC,KAAA;AAAA,EAAM,GAAA;AAAA,EACH,cAAc,CAAC,MAAA,CAAO,MAAA,EAAQ,MAAA,CAAO,aAAa,CAAC,CAAA;AAAA,EACnD,aAAA,CAAc;AAAA,IACV,WAAA,EAAa,iBAAA;AAAA,IACb,IAAA,EAAM,CAAC,MAAM,CAAA;AAAA,IACb,SAAA,EAAW;AAAA,MACP,GAAA,EAAK;AAAA,QACD,WAAA,EAAa,8BAAA;AAAA,QACb,OAAA,EAAS;AAAA,UACL,kBAAA,EAAoB;AAAA,YAChB,MAAA,EAAQ,SAAS,yBAAyB;AAAA;AAC9C;AACJ;AACJ;AACJ,GACH,CAAA;AAAA,EACD,SAAA,CAAU,QAAQ,iBAAiB,CAAA;AAAA,EACnC;AACJ,CAAA;;;ACjEO,SAAS,aAAa,QAAA,EAAiB;AAC1C,EAAA,MAAM,SAAA,GAAY,QAAA,CAAS,KAAA,CAAM,GAAG,CAAA;AACpC,EAAA,MAAM,SAAA,GAAY,SAAA,CAAU,SAAA,CAAU,MAAA,GAAS,CAAC,CAAA;AAEhD,EAAA,OAAO,SAAA;AACX;ACHO,SAAS,YAAA,GAAc;AAC1B,EAAA,OAAY,IAAA,CAAA,EAAA,EAAG;AACnB;ACEA,eAAsB,kBAAA,GAAoB;AACtC,EAAA,OAAO,MAAM,WAAA,EAAY;AAC7B;AAMA,eAAsB,eAAe,IAAA,EAAY;AAC7C,EAAA,OAAO,MAAM,cAAc,IAAI,CAAA;AACnC;AAMA,eAAsB,wBAAA,CAAyB,QAAgB,KAAA,EAAuB;AAClF,EAAA,MAAM,mBAAA,GAAsB,MAAM,cAAA,CAAe,MAAM,CAAA;AACvD,EAAA,IAAG,mBAAA,EAAoB;AACnB,IAAA,MAAA,CAAO,CAAA,iBAAA,EAAoB,mBAAmB,CAAA,CAAE,CAAA;AAAA,EACpD;AACA,EAAA,MAAM,SAAA,GAAY,YAAA,CAAc,KAAA,CAAe,IAAI,CAAA;AACnD,EAAA,MAAM,UAAU,YAAA,EAAa;AAC7B,EAAA,MAAM,IAAA,GAAO,CAAA,iBAAA,EAAoB,OAAO,CAAA,CAAA,EAAI,SAAS,CAAA,CAAA;AACrD,EAAA,aAAA,CAAc,MAAM,IAAI,UAAA,CAAW,MAAO,KAAA,CAAe,WAAA,EAAa,CAAC,CAAA;AACvE,EAAA,MAAM,kBAAkB,MAAA,EAAQ,CAAA,EAAG,OAAO,CAAA,CAAA,EAAI,SAAS,CAAA,CAAE,CAAA;AAC7D;ACpBA,eAAsB,SAAS,CAAA,EAAW;AACtC,EAAA,IAAG;AACC,IAAA,MAAM,WAAA,GAAc,SAAA,CAAyB,CAAA,CAAE,GAAA,CAAI,MAAA,CAAO,eAAe,CAAA,EAAG,KAAA,CAAM,GAAG,CAAA,CAAE,CAAC,CAAW,CAAA;AACnG,IAAA,MAAM,KAAA,GAAQ,WAAA,CAAY,IAAA,IAAQ,MAAA,CAAO,aAAA,GAAgB,MAAM,kBAAA,EAAmB,GAAI,MAAM,YAAA,CAAa,WAAA,CAAY,MAAM,CAAA;AAC3H,IAAA,MAAM,QAAA,GAAwC;AAAA,MAC1C,IAAA,EAAM,YAAA,CAAa,SAAA,EAAW,GAAA,EAAK,2BAA2B,CAAA;AAAA,MAC9D,IAAA,EAAM;AAAA,KACV;AACA,IAAA,OAAO,CAAA,CAAE,KAAK,QAAQ,CAAA;AAAA,EAC1B,SACM,CAAA,EAAE;AACJ,IAAA,MAAM,IAAID,cAAc,GAAA,EAAK,EAAE,SAAU,CAAA,CAAY,OAAA,EAAS,KAAA,EAAO,CAAA,EAAG,CAAA;AAAA,EAC5E;AACJ;AAEA,eAAsB,UAAU,CAAA,EAAW;AACvC,EAAA,IAAG;AACC,IAAA,MAAM,QAAA,GAAkB,MAAM,CAAA,CAAE,GAAA,CAAI,IAAA,EAAK;AACzC,IAAA,MAAM,QAAA,GAA8B;AAAA,MAChC,IAAA,EAAM,YAAA,CAAa,SAAA,EAAW,GAAA,EAAK,+BAA+B,CAAA;AAAA,MAClE,MAAM;AAAC,KACX;AACA,IAAA,MAAM,eAAe,QAAQ,CAAA;AAC7B,IAAA,OAAO,CAAA,CAAE,KAAK,QAAQ,CAAA;AAAA,EAC1B,SACM,CAAA,EAAE;AACJ,IAAA,MAAM,IAAIA,cAAc,GAAA,EAAK,EAAE,SAAU,CAAA,CAAY,OAAA,EAAS,KAAA,EAAO,CAAA,EAAG,CAAA;AAAA,EAC5E;AACJ;AAEA,eAAsBE,WAAU,CAAA,EAAW;AACvC,EAAA,IAAG;AACC,IAAA,MAAM,QAAA,GAAiC,MAAM,CAAA,CAAE,GAAA,CAAI,IAAA,EAAK;AACxD,IAAA,MAAM,WAAA,GAA6B,SAAA,CAAU,CAAA,CAAE,GAAA,CAAI,MAAA,CAAO,eAAe,CAAA,EAAG,KAAA,CAAM,GAAG,CAAA,CAAE,CAAC,CAAW,CAAA;AACnG,IAAA,MAAM,oBAAA,CAAqB,WAAA,CAAY,MAAA,EAAQ,QAAQ,CAAA;AACvD,IAAA,OAAO,EAAE,IAAA,CAAK;AAAA,MACV,IAAA,EAAM,YAAA,CAAa,SAAA,EAAW,GAAA,EAAK,sCAAsC,CAAA;AAAA,MACzE,MAAM;AAAC,KACV,CAAA;AAAA,EACL,SACM,CAAA,EAAE;AACJ,IAAA,MAAM,IAAIF,cAAc,GAAA,EAAK,EAAE,SAAU,CAAA,CAAY,OAAA,EAAS,KAAA,EAAO,CAAA,EAAG,CAAA;AAAA,EAC5E;AACJ;AAEA,eAAsB,kBAAkB,CAAA,EAAW;AAC/C,EAAA,IAAG;AACC,IAAA,MAAM,EAAE,KAAA,EAAM,GAAI,MAAM,CAAA,CAAE,IAAI,SAAA,EAAU;AACxC,IAAA,MAAM,WAAA,GAA6B,SAAA,CAAU,CAAA,CAAE,GAAA,CAAI,MAAA,CAAO,eAAe,CAAA,EAAG,KAAA,CAAM,GAAG,CAAA,CAAE,CAAC,CAAW,CAAA;AAEnG,IAAA,IAAG,EAAE,KAAA,YAAiB,UAAA,CAAW,IAAA,CAAA,EAAM;AACnC,MAAA,MAAM,IAAIA,aAAAA,CAAc,GAAA,EAAK,EAAE,OAAA,EAAS,4BAA4B,CAAA;AAAA,IACxE;AAEA,IAAA,MAAM,wBAAA,CAAyB,WAAA,CAAY,MAAA,EAAS,KAAyB,CAAA;AAC7E,IAAA,MAAM,QAAA,GAA8B;AAAA,MAChC,IAAA,EAAM,YAAA,CAAa,SAAA,EAAW,GAAA,EAAK,kCAAkC,CAAA;AAAA,MACrE,MAAM;AAAC,KACX;AACA,IAAA,OAAO,CAAA,CAAE,KAAK,QAAQ,CAAA;AAAA,EAC1B,SACM,CAAA,EAAE;AACJ,IAAA,MAAM,IAAIA,cAAc,GAAA,EAAK,EAAE,SAAU,CAAA,CAAY,OAAA,EAAS,KAAA,EAAO,CAAA,EAAE,CAAA;AAAA,EAC3E;AACJ;ACzEO,IAAM,yBAAA,GAA4BC,EAAE,MAAA,CAAO;AAAA,EAC9C,EAAA,EAAIA,CAAAA,CAAE,QAAA,CAASA,CAAAA,CAAE,QAAQ,CAAA;AAAA,EACzB,MAAA,EAAQA,CAAAA,CAAE,QAAA,CAASA,CAAAA,CAAE,QAAQ,CAAA;AAAA,EAC7B,QAAA,EAAUA,EAAE,MAAA,EAAO;AAAA,EACnB,KAAA,EAAOA,EAAE,MAAA,EAAO;AAAA,EAChB,KAAA,EAAOA,EAAE,MAAA,EAAO;AAAA,EAChB,OAAA,EAASA,EAAE,MAAA,EAAO;AAAA,EAClB,GAAA,EAAKA,EAAE,MAAA,EAAO;AAAA,EACd,OAAA,EAASA,EAAE,MAAA,EAAO;AAAA,EAClB,OAAA,EAASA,EAAE,MAAA,EAAO;AAAA,EAClB,WAAA,EAAaA,EAAE,KAAA,CAAM;AAAA,IACjBA,EAAE,MAAA,EAAO;AAAA,IACTA,EAAE,IAAA;AAAK,GACV,CAAA;AAAA,EACD,eAAA,EAAiBA,EAAE,MAAA;AACvB,CAAC,CAAA;AAEM,IAAM,UAAA,GAAaA,EAAE,MAAA,CAAO;AAAA,EAC/B,EAAA,EAAIA,CAAAA,CAAE,QAAA,CAASA,CAAAA,CAAE,QAAQ,CAAA;AAAA,EACzB,QAAA,EAAUA,EAAE,MAAA,EAAO;AAAA,EACnB,QAAA,EAAUA,CAAAA,CAAE,QAAA,CAASA,CAAAA,CAAE,QAAQ,CAAA;AAAA,EAC/B,IAAA,EAAMA,EAAE,MAAA,EAAO;AAAA,EACf,eAAA,EAAiBA,EAAE,KAAA,CAAM;AAAA,IACrB,yBAAA;AAAA,IACAA,CAAAA,CAAE,KAAA,CAAMA,CAAAA,CAAE,GAAA,EAAK;AAAA,GAClB;AACL,CAAC,CAAA;AAEM,IAAM,kBAAA,GAAqB,WAAW,MAAA,CAAO;AAAA,EAChD,EAAA,EAAIA,EAAE,SAAA,EAAU;AAAA,EAChB,UAAUA,CAAAA,CAAE,MAAA,EAAO,CAAE,GAAA,CAAI,GAAG,+CAA+C,CAAA;AAAA,EAC3E,eAAA,EAAiB,0BAA0B,MAAA,CAAO;AAAA,IAC9C,EAAA,EAAIA,EAAE,SAAA,EAAU;AAAA,IAChB,MAAA,EAAQA,EAAE,SAAA,EAAU;AAAA,IACpB,eAAA,EAAiBA,EAAE,SAAA,EAAU;AAAA,IAC7B,WAAA,EAAaA,EAAE,SAAA;AAAU,GAC5B;AACL,CAAC,CAAA;AAEM,IAAM,2BAAA,GAA8B,0BAA0B,MAAA,CAAO;AAAA,EACxE,EAAA,EAAIA,EAAE,SAAA,EAAU;AAAA,EAChB,MAAA,EAAQA,EAAE,SAAA,EAAU;AAAA,EACpB,OAAA,EAASA,EAAE,SAAA,EAAU;AAAA,EACrB,OAAA,EAASA,EAAE,SAAA,EAAU;AAAA,EACrB,eAAA,EAAiBA,EAAE,SAAA;AACvB,CAAC,CAAA;AAEM,IAAM,kBAAA,GAAqBA,EAAE,MAAA,CAAO;AAAA,EACvC,IAAA,EAAM,UAAA;AAAA,EACN,IAAA,EAAMA,CAAAA,CAAE,KAAA,CAAM,UAAU;AAC5B,CAAC,CAAA;AAEM,IAAM,gBAAA,GAAmBA,EAAE,MAAA,CAAO;AAAA,EACrC,IAAA,EAAM,UAAA;AAAA,EACN,IAAA,EAAMA,CAAAA,CAAE,KAAA,CAAMA,CAAAA,CAAE,SAAS;AAC7B,CAAC,CAAA;AAEM,IAAM,gBAAA,GAAmBA,EAAE,MAAA,CAAO;AAAA,EACrC,KAAA,EAAOA,CAAAA,CAAE,UAAA,CAAW,IAAI;AAC5B,CAAC,CAAA;ACpDM,IAAM,SAAA,GAAY,IAAIE,IAAAA,EAAK;AAElC,SAAA,CACC,GAAA;AAAA,EAAI,GAAA;AAAA,EACD,cAAc,CAAC,MAAA,CAAO,aAAA,EAAe,MAAA,CAAO,MAAM,CAAC,CAAA;AAAA,EACnDC,aAAAA,CAAc;AAAA,IACV,WAAA,EAAa,2BAAA;AAAA,IACb,IAAA,EAAM,CAAC,OAAO,CAAA;AAAA,IACd,SAAA,EAAW;AAAA,MACP,GAAA,EAAK;AAAA,QACD,WAAA,EAAa,wCAAA;AAAA,QACb,OAAA,EAAS;AAAA,UACL,kBAAA,EAAoB;AAAA,YAChB,MAAA,EAAQC,SAAS,kBAAkB;AAAA;AACvC;AACJ;AACJ;AACJ,GACH,CAAA;AAAA,EACD;AACJ,CAAA,CACC,IAAA;AAAA,EACGD,aAAAA,CAAc;AAAA,IACV,WAAA,EAAa,kBAAA;AAAA,IACb,IAAA,EAAM,CAAC,OAAO,CAAA;AAAA,IACd,SAAA,EAAW;AAAA,MACP,GAAA,EAAK;AAAA,QACD,WAAA,EAAa,8BAAA;AAAA,QACb,OAAA,EAAS;AAAA,UACL,kBAAA,EAAoB;AAAA,YAChB,MAAA,EAAQC,SAAS,gBAAgB;AAAA;AACrC;AACJ;AACJ;AACJ,GACH,CAAA;AAAA,EACDC,SAAAA,CAAU,QAAQ,kBAAkB,CAAA;AAAA,EACpC;AACJ,CAAA,CACC,KAAA;AAAA,EACG,cAAc,CAAC,MAAA,CAAO,MAAA,EAAQ,MAAA,CAAO,aAAa,CAAC,CAAA;AAAA,EACnDF,aAAAA,CAAc;AAAA,IACV,WAAA,EAAa,yBAAA;AAAA,IACb,IAAA,EAAM,CAAC,OAAO,CAAA;AAAA,IACd,SAAA,EAAW;AAAA,MACP,GAAA,EAAK;AAAA,QACD,WAAA,EAAa,qCAAA;AAAA,QACb,OAAA,EAAS;AAAA,UACL,kBAAA,EAAoB;AAAA,YAChB,MAAA,EAAQC,SAAS,gBAAgB;AAAA;AACrC;AACJ;AACJ;AACJ,GACH,CAAA;AAAA,EACDC,SAAAA,CAAU,QAAQ,2BAA2B,CAAA;AAAA,EAC7CJ;AACJ,CAAA,CACC,IAAA;AAAA,EACG,SAAA;AAAA,EACA,cAAc,CAAC,MAAA,CAAO,MAAA,EAAQ,MAAA,CAAO,aAAa,CAAC,CAAA;AAAA,EACnDE,aAAAA,CAAc;AAAA,IACV,WAAA,EAAa,yBAAA;AAAA,IACb,IAAA,EAAM,CAAC,OAAO,CAAA;AAAA,IACd,SAAA,EAAW;AAAA,MACP,GAAA,EAAK;AAAA,QACD,WAAA,EAAa,kCAAA;AAAA,QACb,OAAA,EAAS;AAAA,UACL,kBAAA,EAAoB;AAAA,YAChB,MAAA,EAAQC,SAAS,gBAAgB;AAAA;AACrC;AACJ;AACJ;AACJ,GACH,CAAA;AAAA,EACDC,SAAAA,CAAU,QAAQ,gBAAgB,CAAA;AAAA,EAClC;AACJ,CAAA;;;ACrFA,eAAsB,SAAA,GAAW;AAC7B,EAAA,OAAO,MAAM,MAAA,CAAO,KAAA,CAAM,QAAA,EAAS;AACvC;;;ACFA,eAAsB,kBAAA,GAAoB;AACtC,EAAA,OAAO,MAAM,SAAA,EAAU;AAC3B;ACEA,eAAsB,YAAY,CAAA,EAAW;AACzC,EAAA,IAAG;AACC,IAAA,MAAM,MAAA,GAAS,MAAM,kBAAA,EAAmB;AACxC,IAAA,MAAM,QAAA,GAA0C;AAAA,MAC5C,IAAA,EAAM,YAAA,CAAa,SAAA,EAAW,GAAA,EAAK,2BAA2B,CAAA;AAAA,MAC9D,IAAA,EAAM;AAAA,KACV;AACA,IAAA,OAAO,CAAA,CAAE,KAAK,QAAQ,CAAA;AAAA,EAC1B,SACM,CAAA,EAAE;AACJ,IAAA,MAAM,IAAIN,cAAc,GAAA,EAAK,EAAE,SAAU,CAAA,CAAY,OAAA,EAAS,KAAA,EAAO,CAAA,EAAG,CAAA;AAAA,EAC5E;AACJ;ACfO,IAAM,WAAA,GAAcC,EAAE,MAAA,CAAO;AAAA,EAChC,EAAA,EAAIA,CAAAA,CAAE,MAAA,EAAO,CAAE,QAAA,EAAS;AAAA,EACxB,SAAA,EAAWA,EAAE,MAAA;AACjB,CAAC,CAAA;AAEM,IAAM,mBAAA,GAAsBA,EAAE,MAAA,CAAO;AAAA,EACxC,IAAA,EAAM,UAAA;AAAA,EACN,IAAA,EAAMA,EAAE,KAAA,CAAM;AAAA,IACVA,CAAAA,CAAE,MAAM,WAAW,CAAA;AAAA,IACnBA,CAAAA,CAAE,KAAA,CAAMA,CAAAA,CAAE,OAAA,EAAS;AAAA,GACtB;AACL,CAAC,CAAA;ACRM,IAAM,UAAA,GAAa,IAAIE,IAAAA,EAAK;AAEnC,UAAA,CACC,GAAA;AAAA,EACG,GAAA;AAAA,EACAC,aAAAA,CAAc;AAAA,IACV,WAAA,EAAa,qBAAA;AAAA,IACb,IAAA,EAAM,CAAC,QAAQ,CAAA;AAAA,IACf,SAAA,EAAW;AAAA,MACP,GAAA,EAAK;AAAA,QACD,WAAA,EAAa,wBAAA;AAAA,QACb,OAAA,EAAS;AAAA,UACL,kBAAA,EAAmB;AAAA,YACf,MAAA,EAAQC,SAAS,mBAAmB;AAAA;AACxC;AACJ;AACJ;AACJ,GACH,CAAA;AAAA,EACD;AACJ,CAAA;ACxBO,SAAS,eAAA,GAAiB;AAC7B,EAAA,IAAG,CAAC,UAAA,CAAW,WAAW,CAAA,EAAE;AACxB,IAAA,SAAA,CAAU,WAAW,CAAA;AAAA,EACzB;AACA,EAAA,IAAG,CAAC,UAAA,CAAW,kBAAkB,CAAA,EAAE;AAC/B,IAAA,SAAA,CAAU,kBAAkB,CAAA;AAAA,EAChC;AACA,EAAA,IAAG,CAAC,UAAA,CAAW,qBAAqB,CAAA,EAAE;AAClC,IAAA,SAAA,CAAU,qBAAqB,CAAA;AAAA,EACnC;AACJ;;;ACMA,MAAA,CAAO,MAAA,EAAO;AAEd,IAAM,IAAA,GAAO,OAAA,CAAQ,GAAA,CAAI,IAAA,IAAQ,GAAA;AACjC,IAAM,GAAA,GAAM,IAAIF,IAAAA,EAAK;AAErB,eAAA,EAAgB;AAEhB,GAAA,CAAI,GAAA,CAAI,GAAA,EAAK,IAAA,EAAM,CAAA;AAEnB,GAAA,CAAI,GAAA,CAAI,GAAA,EAAK,CAAC,CAAA,KAAM;AAClB,EAAA,OAAO,EAAE,IAAA,CAAK;AAAA,IACZ,OAAA,EAAS;AAAA,GACV,CAAA;AACH,CAAC,CAAA;AAED,GAAA,CAAI,GAAA,CAAI,cAAc,WAAA,CAAY;AAAA,EAChC,IAAA,EAAM;AACR,CAAC,CAAC,CAAA;AAGF,GAAA,CAAI,KAAA,CAAM,SAAS,SAAS,CAAA;AAC5B,GAAA,CAAI,KAAA,CAAM,UAAU,SAAS,CAAA;AAC7B,GAAA,CAAI,KAAA,CAAM,WAAW,UAAU,CAAA;AAG/B,GAAA,CAAI,IAAI,KAAA,EAAO,SAAA,CAAU,EAAE,GAAA,EAAK,OAAA,EAAS,CAAC,CAAA;AAE1C,GAAA,CAAI,GAAA;AAAA,EACF,OAAA;AAAA,EACA,aAAa,GAAA,EAAK;AAAA,IAChB,aAAA,EAAe;AAAA,MACb,IAAA,EAAM;AAAA,QACJ,KAAA,EAAO,UAAA;AAAA,QACP,OAAA,EAAS,OAAA;AAAA,QACT,WAAA,EAAa;AAAA,OACf;AAAA,MACA,OAAA,EAAS;AAAA,QACP,EAAE,GAAA,EAAK,CAAA,iBAAA,EAAoB,IAAI,CAAA,CAAA,EAAI,aAAa,cAAA;AAAe;AACjE;AACF,GACD;AACH,CAAA;AAGA,GAAA,CAAI,OAAA,CAAQ,CAAC,GAAA,EAAgC,CAAA,KAAe;AAC1D,EAAA,CAAA,CAAE,OAAQ,GAAA,YAAeH,aAAAA,GAAgB,IAAI,WAAA,EAAY,CAAE,SAAS,GAAkB,CAAA;AACtF,EAAA,OAAO,EAAE,IAAA,CAAK;AAAA,IACZ,IAAA,EAAM,YAAA;AAAA,MACJ,QAAA;AAAA,MACA,GAAA,YAAeA,aAAAA,GAAgB,GAAA,CAAI,WAAA,GAAc,MAAA,GAAS,GAAA;AAAA,MAC1D,GAAA,CAAI;AAAA,KACN;AAAA,IACA,MAAM;AAAC,GACR,CAAA;AACH,CAAC,CAAA;AAED,KAAA,CAAM;AAAA,EACJ,OAAO,GAAA,CAAI,KAAA;AAAA,EACX,IAAA;AAAA,EACA,QAAA,EAAU;AACZ,CAAA,EAAG,CAAC,IAAA,KAAS;AACX,EAAA,OAAA,CAAQ,GAAA,CAAI,CAAA,sCAAA,EAAyC,IAAA,CAAK,IAAI,CAAA,CAAE,CAAA;AAClE,CAAC,CAAA","file":"index.js","sourcesContent":["import { PrismaClient } from \"@prisma/client\"\r\n\r\nexport const prisma = new PrismaClient()","import type { TTokenPayload } from '@/types/auth-type.ts'\r\nimport { decode, sign, verify } from 'hono/jwt'\r\n\r\nexport async function jwtSign(payload: TTokenPayload){\r\n    return await sign({\r\n        ...payload,\r\n        exp: Math.floor(Date.now() / 1000) + 60 * 60 * 72\r\n    }, process.env.JWT_KEY ?? \"nakano\", \"HS256\")\r\n}\r\n\r\nexport async function jwtVerify<T>(token: string): Promise<T> {\r\n    return await verify(token, process.env.JWT_KEY ?? \"nakano\", \"HS256\") as T\r\n}\r\n\r\nexport function jwtDecode<T>(token: string): T {\r\n    return decode(token).payload as T\r\n}","import { type TTokenPayload } from \"@/types/auth-type.ts\"\r\nimport { jwtVerify } from \"@/utils/jwt.ts\"\r\nimport type { Context, Next } from \"hono\"\r\nimport { HTTPException } from \"hono/http-exception\"\r\n\r\nexport const Access = {\r\n    ADMINISTRATOR: 0,\r\n    ALUMNI: 1\r\n}\r\n\r\nexport function Authorization(access: number[]){\r\n    return async(c: Context, next: Next) => {\r\n        if(!c.req.header(\"Authorization\")){\r\n            throw new HTTPException(403, { message: \"Access Forbidden\" })\r\n        }\r\n        try {\r\n            const token = c.req.header(\"Authorization\")?.split(\" \")[1]\r\n            const v = await jwtVerify<TTokenPayload>(token as string)\r\n            if(!access.includes(v.role)){\r\n                throw new HTTPException(403, { message: \"Access Forbidden\" })\r\n            }\r\n\r\n            await next()\r\n        }\r\n        catch {\r\n            throw new HTTPException(403, { message: \"Access Forbidden\" })\r\n        }\r\n    }\r\n}","import bcrypt from \"bcrypt\"\r\n\r\nconst saltRound: number = (parseInt(process.env.SALT_OR_ROUNDS ?? \"1\") ?? 1) \r\n\r\nexport function passwordHash(password: string){\r\n    return bcrypt.hashSync(password, saltRound);\r\n}\r\n\r\nexport function passwordCompare(password: string, hashPassword: string){\r\n    return bcrypt.compareSync(password, hashPassword);\r\n}","import { prisma } from \"@/libs/db/index.ts\";\r\nimport { Access } from \"@/middleware/authorization.ts\";\r\nimport type { TAuthUser } from \"@/types/auth-type.ts\";\r\nimport type { TUser, TUserWithInformation, TUserWithInformationUpdateable } from \"@/types/user-type.ts\";\r\nimport { passwordHash } from \"@/utils/bcrypt.ts\";\r\n\r\nexport async function findAllUser(){\r\n    return await prisma.user.findMany({\r\n        include: {\r\n            UserInformation: {\r\n                include:{\r\n                    major: true\r\n                }\r\n            }\r\n        },\r\n        where: {\r\n            role: Access.ALUMNI\r\n        }\r\n    })\r\n}\r\n\r\nexport async function findUserById(id: number){\r\n    return await prisma.user.findFirst({\r\n        where: {\r\n            id\r\n        },\r\n        include: {\r\n            UserInformation: true\r\n        }\r\n    })\r\n}\r\n\r\nexport async function findUserForAuth(\r\n    user: TAuthUser\r\n){\r\n    return await prisma.user.findFirst({\r\n        where: {\r\n            ...user\r\n        },\r\n        include: {\r\n            UserInformation: {\r\n                select: {\r\n                    fullname: true\r\n                }\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\nexport async function insertNewUser(user: TUser){\r\n    return await prisma.user.create({\r\n        data: {\r\n            username: user.username,\r\n            password: passwordHash(user.password ?? \"\"),\r\n            role: user.role,\r\n            UserInformation: {\r\n                create: {\r\n                    fullname: (user.UserInformation as TUserWithInformation).fullname,\r\n                    email: (user.UserInformation as TUserWithInformation).email,\r\n                    phone: (user.UserInformation as TUserWithInformation).phone,\r\n                    address: (user.UserInformation as TUserWithInformation).address,\r\n                    bio: (user.UserInformation as TUserWithInformation).bio,\r\n                    classOf: (user.UserInformation as TUserWithInformation).classOf,\r\n                    majorId: (user.UserInformation as TUserWithInformation).majorId,\r\n                }\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\nexport async function patchUserInformation(userId: number, userInformation: TUserWithInformationUpdateable){\r\n    return await prisma.user.update({\r\n        where: {\r\n            id: userId\r\n        },\r\n        data: {\r\n            UserInformation: {\r\n                update: {\r\n                    ...userInformation\r\n                }\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\nexport async function patchUser(userId: number, data: {\r\n    id?: number,\r\n    username?: string,\r\n    password?: string,\r\n    role?: number\r\n}){\r\n    return await prisma.user.update({\r\n        where: {\r\n            id: userId\r\n        },\r\n        data\r\n    })\r\n}\r\n\r\nexport async function hasProfilePict(userId: number){\r\n    const user = await prisma.userInformation.findFirst({\r\n        where: {\r\n            userId\r\n        }\r\n    })\r\n    if(user?.profilePict != \"\"){\r\n        return user?.profilePict\r\n    }\r\n    return false\r\n}\r\n\r\nexport async function updateProfilePict(userId: number, fileName: string){\r\n    return await prisma.userInformation.update({\r\n        where: {\r\n            userId\r\n        },\r\n        data: {\r\n            profilePict: fileName\r\n        }\r\n    })\r\n}","import { findUserForAuth } from \"@/repositories/user-repository.ts\";\r\nimport type { TTokenPayload, TAuthUser } from \"@/types/auth-type.ts\";\r\nimport { passwordCompare } from \"@/utils/bcrypt.ts\";\r\nimport { jwtVerify } from \"@/utils/jwt.ts\";\r\nimport { HTTPException } from \"hono/http-exception\";\r\n\r\nexport async function AuthService(userData: TAuthUser) {\r\n    const user = await findUserForAuth({\r\n        ...userData,\r\n        password: undefined\r\n    })\r\n    if(!user){\r\n        throw new HTTPException(404, {message: \"User not found\"})\r\n    }\r\n    if(!passwordCompare(userData.password ?? \"\", user.password)){\r\n        throw new HTTPException(403, {message: \"Username or password is wrong\"})\r\n    }\r\n\r\n    return user\r\n}\r\n\r\nexport async function AuthGetSessionService(token: string){\r\n    const information = await jwtVerify<TTokenPayload>(token)\r\n    return information\r\n}","import { patchUser } from \"@/repositories/user-repository.ts\";\r\nimport { passwordHash } from \"@/utils/bcrypt.ts\";\r\n\r\nexport async function changePasswordService(userId: number, newPassword: string){\r\n    return await patchUser(userId, {\r\n        password: passwordHash(newPassword)\r\n    })\r\n}","import type { TMeta, TMetaStatus } from \"@/types/meta-type.ts\";\r\n\r\nexport function generateMeta(status: TMetaStatus, code: number, message: string): TMeta {\r\n    return {\r\n        status,\r\n        code,\r\n        message\r\n    }\r\n}","import { AuthGetSessionService, AuthService } from \"@/services/auth-service.ts\";\r\nimport { changePasswordService } from \"@/services/change-password-service.ts\";\r\nimport type { TAuthResponse } from \"@/types/auth-type.ts\";\r\nimport type { TUser, TUserResponse } from \"@/types/user-type.ts\";\r\nimport { generateMeta } from \"@/utils/generate-meta.ts\";\r\nimport { jwtSign } from \"@/utils/jwt.ts\";\r\nimport type { Context } from \"hono\";\r\n\r\nexport async function postAuthHandler(c: Context){\r\n    const user = await AuthService(await c.req.json())\r\n\r\n    const response: TAuthResponse = {\r\n        meta: generateMeta(\"SUCCESS\", 200, \"Auth successfully\"),\r\n        data: {\r\n            token: await jwtSign({\r\n                username: user.username,\r\n                role: user.role,\r\n                fullName: user.UserInformation?.fullname ?? \"\",\r\n                userId: user.id\r\n            })\r\n        }\r\n    }\r\n\r\n    return c.json(response)\r\n}\r\n\r\nexport async function getAuthSession(c: Context){\r\n    const information = await AuthGetSessionService(c.req.header(\"Authorization\")?.split(\" \")[1] ?? \"\")\r\n\r\n    const response: TUserResponse<typeof information> = {\r\n        meta: generateMeta(\"SUCCESS\", 200, \"Success get user information\"),\r\n        data: information\r\n    }\r\n\r\n    return c.json(response)\r\n}\r\n\r\nexport async function changePasswordHandler(c: Context){\r\n    const information = await AuthGetSessionService(c.req.header(\"Authorization\")?.split(\" \")[1] ?? \"\")\r\n    const { password } = await c.req.json()\r\n    \r\n    await changePasswordService(information.userId, password)\r\n\r\n    const response: TUserResponse<[]> = {\r\n        meta: generateMeta(\"SUCCESS\", 200, \"Success change user password\"),\r\n        data: []\r\n    }\r\n\r\n    return c.json(response)\r\n}","import { z } from \"zod\";\r\n\r\nexport const MetaSchema = z.object({\r\n    status: z.enum([\"SUCCESS\", \"FAILED\"]),\r\n    message: z.string(),\r\n    code: z.number()\r\n})","import { z } from \"zod\"\r\nimport { MetaSchema } from \"./meta-schemas.ts\"\r\n\r\nexport const AuthSchema = z.object({\r\n    role: z.number({\r\n        required_error: \"Required role for authentication\"\r\n    }),\r\n    username: z.string({\r\n        required_error: \"Required username for authentication\"\r\n    }),\r\n    password: z.string({\r\n        required_error: \"Required password for authentication\"\r\n    }).min(8, \"Password length not valid\")\r\n})\r\n\r\nexport const AuthSessionSchema = AuthSchema.extend({\r\n    password: z.undefined()\r\n})\r\n\r\nexport const AuthResponseSchema = z.object({\r\n    meta: MetaSchema,\r\n    data: z.union([\r\n        z.object({\r\n            token: z.string()\r\n        }),\r\n        z.array(z.any())\r\n    ])\r\n})\r\n\r\nexport const NewPasswordResponseSchema = z.object({\r\n    meta: MetaSchema,\r\n    data: z.array(z.any())\r\n})\r\n\r\nexport const NewPasswordSchema = z.object({\r\n    password: z.string({required_error: \"Required new password\"}).min(8, \"Password length not valid\")\r\n})","import { changePasswordHandler, getAuthSession, postAuthHandler } from \"@/handlers/auth-handler.ts\"\r\nimport { Access, Authorization } from \"@/middleware/authorization.ts\"\r\nimport { AuthResponseSchema, AuthSchema, AuthSessionSchema, NewPasswordResponseSchema, NewPasswordSchema } from \"@/schemas/auth-schema.ts\"\r\nimport { Hono } from \"hono\"\r\nimport { describeRoute } from \"hono-openapi\"\r\nimport {\r\n  resolver,\r\n  validator,\r\n} from 'hono-openapi/zod'\r\n\r\nexport const authRoute = new Hono()\r\n\r\nauthRoute.post('/',\r\n    describeRoute({\r\n        description: \"Say hello to auth\",\r\n        tags: [\"Auth\"],\r\n        responses: {\r\n            200: {\r\n                description: \"Successfully authentication\",\r\n                content: {\r\n                    \"application/json\": {\r\n                        schema: resolver(AuthResponseSchema)        \r\n                    }\r\n                }\r\n            },\r\n        }\r\n    }),\r\n    validator(\"json\", AuthSchema),\r\n    postAuthHandler\r\n)\r\n.get('/',\r\n    describeRoute({\r\n        description: \"Get session information\",\r\n        tags: [\"Auth\"],\r\n        responses: {\r\n            200: {\r\n                description: \"Successfully get session information\",\r\n                content: {\r\n                    \"application/json\": {\r\n                        schema: resolver(AuthSessionSchema)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }),\r\n    getAuthSession\r\n)\r\n.patch('/',\r\n    Authorization([Access.ALUMNI, Access.ADMINISTRATOR]),\r\n    describeRoute({\r\n        description: \"Change password\",\r\n        tags: [\"Auth\"],\r\n        responses: {\r\n            200: {\r\n                description: \"Successfully change password\",\r\n                content: {\r\n                    \"application/json\": {\r\n                        schema: resolver(NewPasswordResponseSchema)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }),\r\n    validator(\"json\", NewPasswordSchema),\r\n    changePasswordHandler\r\n)","export function getExtension(fileName: string){\r\n    const splitting = fileName.split(\".\")\r\n    const extension = splitting[splitting.length - 1]\r\n\r\n    return extension\r\n}","import * as uuid from \"uuid\"\r\n\r\nexport function generateUuid(){\r\n    return uuid.v4()\r\n}","import { findAllUser, hasProfilePict, insertNewUser, patchUserInformation, updateProfilePict } from \"@/repositories/user-repository.ts\";\r\nimport type { TUser, TUserWithInformationUpdateable } from \"@/types/user-type.ts\";\r\nimport { getExtension } from \"@/utils/get-extension.ts\";\r\nimport { generateUuid } from \"@/utils/uuid.ts\";\r\nimport { rmSync, writeFileSync } from \"fs\";\r\n\r\nexport async function findAllUserService(){\r\n    return await findAllUser()\r\n}\r\n\r\nexport async function findUserById(id: number){\r\n    return await findUserById(id)\r\n}\r\n\r\nexport async function newUserService(user: TUser){\r\n    return await insertNewUser(user)\r\n}\r\n\r\nexport async function patchUserService(userId: number, userInformation: TUserWithInformationUpdateable){\r\n    return await patchUserInformation(userId, userInformation)\r\n}\r\n\r\nexport async function uploadProfilePictService(userId: number, image: globalThis.File){\r\n    const previousProfilePict = await hasProfilePict(userId)\r\n    if(previousProfilePict){\r\n        rmSync(`./uploads/images/${previousProfilePict}`)\r\n    }\r\n    const extension = getExtension((image as File).name)\r\n    const newName = generateUuid()\r\n    const path = `./uploads/images/${newName}.${extension}`\r\n    writeFileSync(path, new Uint8Array(await (image as File).arrayBuffer()))\r\n    await updateProfilePict(userId, `${newName}.${extension}`)\r\n}","import { Access } from \"@/middleware/authorization.ts\";\r\nimport { findUserById, patchUserInformation } from \"@/repositories/user-repository.ts\";\r\nimport { findAllUserService, newUserService, uploadProfilePictService } from \"@/services/user-service.ts\";\r\nimport type { TTokenPayload } from \"@/types/auth-type.ts\";\r\nimport type { TUser, TUserResponse, TUserWithInformation } from \"@/types/user-type.ts\";\r\nimport { generateMeta } from \"@/utils/generate-meta.ts\";\r\nimport { jwtDecode } from \"@/utils/jwt.ts\";\r\nimport type { File } from \"buffer\";\r\nimport { writeFileSync } from \"fs\";\r\nimport type { Context } from \"hono\";\r\nimport { HTTPException } from \"hono/http-exception\";\r\n\r\nexport async function getUsers(c: Context){\r\n    try{\r\n        const sessionData = jwtDecode<TTokenPayload>(c.req.header(\"Authorization\")?.split(\" \")[1] as string)\r\n        const users = sessionData.role == Access.ADMINISTRATOR ? await findAllUserService() : await findUserById(sessionData.userId)\r\n        const response: TUserResponse<typeof users> = {\r\n            meta: generateMeta(\"SUCCESS\", 200, \"Successfuly get all users\"),\r\n            data: users\r\n        }\r\n        return c.json(response)\r\n    }\r\n    catch(e){\r\n        throw new HTTPException(400, { message: (e as Error).message, cause: e })\r\n    }\r\n}\r\n\r\nexport async function postUsers(c: Context){\r\n    try{\r\n        const formData: TUser = await c.req.json()\r\n        const response: TUserResponse<[]> = {\r\n            meta: generateMeta(\"SUCCESS\", 200, \"Successfuly register new user\"),\r\n            data: []\r\n        }\r\n        await newUserService(formData)\r\n        return c.json(response)\r\n    }\r\n    catch(e){\r\n        throw new HTTPException(400, { message: (e as Error).message, cause: e })\r\n    }\r\n}\r\n\r\nexport async function patchUser(c: Context){\r\n    try{\r\n        const formData: TUserWithInformation = await c.req.json()\r\n        const sessionData: TTokenPayload = jwtDecode(c.req.header(\"Authorization\")?.split(\" \")[1] as string)\r\n        await patchUserInformation(sessionData.userId, formData)\r\n        return c.json({\r\n            meta: generateMeta(\"SUCCESS\", 200, \"Successfully modify user information\"),\r\n            data: []\r\n        })\r\n    }\r\n    catch(e){\r\n        throw new HTTPException(400, { message: (e as Error).message, cause: e })\r\n    }\r\n}\r\n\r\nexport async function uploadProfilePict(c: Context){\r\n    try{\r\n        const { image } = await c.req.parseBody()\r\n        const sessionData: TTokenPayload = jwtDecode(c.req.header(\"Authorization\")?.split(\" \")[1] as string)\r\n\r\n        if(!(image instanceof globalThis.File)){\r\n            throw new HTTPException(400, { message: \"Bad request, should file\" })\r\n        }\r\n\r\n        await uploadProfilePictService(sessionData.userId, (image as globalThis.File))\r\n        const response: TUserResponse<[]> = {\r\n            meta: generateMeta(\"SUCCESS\", 200, \"Successfuly upload profile image\"),\r\n            data: []\r\n        }\r\n        return c.json(response)\r\n    }\r\n    catch(e){\r\n        throw new HTTPException(400, { message: (e as Error).message, cause: e})\r\n    }\r\n}","import { z } from \"zod\";\r\nimport { MetaSchema } from \"./meta-schemas.ts\";\r\n\r\nexport const UserWithInformationSchema = z.object({\r\n    id: z.optional(z.number()),\r\n    userId: z.optional(z.number()),\r\n    fullname: z.string(),\r\n    email: z.string(),\r\n    phone: z.string(),\r\n    address: z.string(),\r\n    bio: z.string(),\r\n    classOf: z.string(),\r\n    majorId: z.number(),\r\n    linkedinUrl: z.union([\r\n        z.string(),\r\n        z.null()\r\n    ]),\r\n    curriculumVitae: z.string()\r\n})\r\n\r\nexport const UserSchema = z.object({\r\n    id: z.optional(z.string()),\r\n    username: z.string(),\r\n    password: z.optional(z.string()),\r\n    role: z.number(),\r\n    UserInformation: z.union([\r\n        UserWithInformationSchema,\r\n        z.array(z.any())\r\n    ])\r\n})\r\n\r\nexport const UserRegisterSchema = UserSchema.extend({\r\n    id: z.undefined(),\r\n    password: z.string().min(8, \"Required password length 8 characters minimum\"),\r\n    UserInformation: UserWithInformationSchema.extend({\r\n        id: z.undefined(),\r\n        userId: z.undefined(),\r\n        curriculumVitae: z.undefined(),\r\n        linkedinUrl: z.undefined()\r\n    })\r\n})\r\n\r\nexport const UserInformationModifySchema = UserWithInformationSchema.extend({\r\n    id: z.undefined(),\r\n    userId: z.undefined(),\r\n    classOf: z.undefined(),\r\n    majorId: z.undefined(),\r\n    curriculumVitae: z.undefined()\r\n})\r\n\r\nexport const UserResponseSchema = z.object({\r\n    meta: MetaSchema,\r\n    data: z.array(UserSchema)\r\n})\r\n\r\nexport const CreateUserSchema = z.object({\r\n    meta: MetaSchema,\r\n    data: z.array(z.unknown())\r\n})\r\n\r\nexport const FileUploadSchema = z.object({\r\n    image: z.instanceof(File)\r\n})","import { getUsers, patchUser, postUsers, uploadProfilePict } from \"@/handlers/user-handler.ts\"\r\nimport { Access, Authorization } from \"@/middleware/authorization.ts\"\r\nimport { CreateUserSchema, FileUploadSchema, UserInformationModifySchema, UserRegisterSchema, UserResponseSchema } from \"@/schemas/user-schema.ts\"\r\nimport { Hono } from \"hono\"\r\nimport { describeRoute } from \"hono-openapi\"\r\nimport {\r\n  resolver,\r\n  validator,\r\n} from 'hono-openapi/zod'\r\n\r\nexport const userRoute = new Hono()\r\n\r\nuserRoute\r\n.get('/',\r\n    Authorization([Access.ADMINISTRATOR, Access.ALUMNI]),\r\n    describeRoute({\r\n        description: \"Get all users information\",\r\n        tags: [\"Users\"],\r\n        responses: {\r\n            200: {\r\n                description: \"Successfully get all users information\",\r\n                content: {\r\n                    \"application/json\": {\r\n                        schema: resolver(UserResponseSchema)        \r\n                    }\r\n                }\r\n            },\r\n        }\r\n    }),\r\n    getUsers\r\n)\r\n.post(\r\n    describeRoute({\r\n        description: \"Create new users\",\r\n        tags: [\"Users\"],\r\n        responses: {\r\n            200: {\r\n                description: \"Successfuly create new users\",\r\n                content: {\r\n                    \"application/json\": {\r\n                        schema: resolver(CreateUserSchema)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }), \r\n    validator(\"json\", UserRegisterSchema), \r\n    postUsers\r\n)\r\n.patch(\r\n    Authorization([Access.ALUMNI, Access.ADMINISTRATOR]),\r\n    describeRoute({\r\n        description: \"Modify user information\",\r\n        tags: [\"Users\"],\r\n        responses: {\r\n            200: {\r\n                description: \"Successfuly modify user information\",\r\n                content: {\r\n                    \"application/json\": {\r\n                        schema: resolver(CreateUserSchema)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }),\r\n    validator(\"json\", UserInformationModifySchema),\r\n    patchUser\r\n)\r\n.post(\r\n    \"/upload\", \r\n    Authorization([Access.ALUMNI, Access.ADMINISTRATOR]),\r\n    describeRoute({\r\n        description: \"Modify user information\",\r\n        tags: [\"Users\"],\r\n        responses: {\r\n            200: {\r\n                description: \"Successfuly upload image profile\",\r\n                content: {\r\n                    \"application/json\": {\r\n                        schema: resolver(CreateUserSchema)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }),\r\n    validator(\"form\", FileUploadSchema),\r\n    uploadProfilePict\r\n)","import { prisma } from \"@/libs/db/index.ts\"\r\n\r\nexport async function findMajor(){\r\n    return await prisma.major.findMany()\r\n}","import { findMajor } from \"@/repositories/majors-repository.ts\";\r\n\r\nexport async function getAllMajorService(){\r\n    return await findMajor()\r\n}","import { getAllMajorService } from \"@/services/major-service.ts\";\r\nimport type { TMajorResponse } from \"@/types/major-type.ts\";\r\nimport { generateMeta } from \"@/utils/generate-meta.ts\";\r\nimport type { Context } from \"hono\";\r\nimport { HTTPException } from \"hono/http-exception\";\r\n\r\nexport async function getAllMajor(c: Context){\r\n    try{\r\n        const majors = await getAllMajorService()\r\n        const response: TMajorResponse<typeof majors> = {\r\n            meta: generateMeta(\"SUCCESS\", 200, \"Successfuly get all users\"),\r\n            data: majors\r\n        }\r\n        return c.json(response)\r\n    }\r\n    catch(e){\r\n        throw new HTTPException(400, { message: (e as Error).message, cause: e })\r\n    }\r\n}","import { z } from \"zod\";\r\nimport { MetaSchema } from \"./meta-schemas.ts\";\r\n\r\nexport const MajorSchema = z.object({\r\n    id: z.number().optional(),\r\n    majorName: z.string()\r\n})\r\n\r\nexport const MajorResponseSchema = z.object({\r\n    meta: MetaSchema,\r\n    data: z.union([\r\n        z.array(MajorSchema),\r\n        z.array(z.unknown())\r\n    ])\r\n})","import { getAllMajor } from \"@/handlers/major-handler.ts\"\r\nimport { MajorResponseSchema } from \"@/schemas/major-schema.ts\"\r\nimport { Hono } from \"hono\"\r\nimport { describeRoute } from \"hono-openapi\"\r\nimport { resolver } from \"hono-openapi/zod\"\r\n\r\nexport const majorRoute = new Hono()\r\n\r\nmajorRoute\r\n.get(\r\n    \"/\",\r\n    describeRoute({\r\n        description: \"Get all majors list\",\r\n        tags: [\"Majors\"],\r\n        responses: {\r\n            200: {\r\n                description: \"Success get all majors\",\r\n                content: {\r\n                    \"application/json\":{\r\n                        schema: resolver(MajorResponseSchema)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }),\r\n    getAllMajor\r\n)","import { existsSync, mkdirSync } from \"fs\";\r\n\r\nexport function setupUploadsDir(){\r\n    if(!existsSync(\"./uploads\")){\r\n        mkdirSync(\"./uploads\")\r\n    }\r\n    if(!existsSync(\"./uploads/images\")){\r\n        mkdirSync(\"./uploads/images\")\r\n    }\r\n    if(!existsSync(\"./uploads/documents\")){\r\n        mkdirSync(\"./uploads/documents\")\r\n    }\r\n}","import { serve } from '@hono/node-server'\nimport { serveStatic } from '@hono/node-server/serve-static'\nimport { type Context, Hono } from 'hono'\nimport { swaggerUI } from '@hono/swagger-ui'\nimport { \n  authRoute, \n  userRoute,\n  majorRoute\n} from '@/routes/index.ts'\nimport { openAPISpecs } from 'hono-openapi'\nimport { cors } from 'hono/cors'\nimport dotenv from \"dotenv\"\nimport type { HTTPResponseError } from 'hono/types'\nimport { generateMeta } from './utils/generate-meta.ts'\nimport { HTTPException } from 'hono/http-exception'\nimport type { StatusCode } from 'hono/utils/http-status'\nimport { setupUploadsDir } from './check-uploads-dir.ts'\n\ndotenv.config()\n\nconst port = process.env.PORT || 4000\nconst app = new Hono()\n\nsetupUploadsDir()\n\napp.use(\"*\", cors())\n\napp.get('/', (c) => {\n  return c.json({\n    message: \"Alumnio API, see /ui for documentation\"\n  })\n})\n\napp.use('/uploads/*', serveStatic({\n  root: './'\n}))\n\n// FOR APP ROUTE\napp.route(\"/auth\", authRoute)\napp.route(\"/users\", userRoute)\napp.route(\"/majors\", majorRoute)\n// END ROUTE\n\napp.use('/ui', swaggerUI({ url: '/docs' }))\n\napp.get(\n  '/docs',\n  openAPISpecs(app, {\n    documentation: {\n      info: {\n        title: 'Hono API',\n        version: '1.0.0',\n        description: 'Greeting API',\n      },\n      servers: [\n        { url: `http://localhost:${port}`, description: 'Local Server' },\n      ],\n    },\n  })\n)\n\n// ERROR HANDLING\napp.onError((err: Error | HTTPResponseError, c: Context) => {\n  c.status((err instanceof HTTPException ? err.getResponse().status : 500) as StatusCode)\n  return c.json({\n    meta: generateMeta(\n      \"FAILED\", \n      err instanceof HTTPException ? err.getResponse().status : 500, \n      err.message\n    ),\n    data: []\n  })\n})\n\nserve({\n  fetch: app.fetch,\n  port: port as number,\n  hostname: \"0.0.0.0\"\n}, (info) => {\n  console.log(`Server is running on http://localhost:${info.port}`)\n})\n"]}